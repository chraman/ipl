ReclineJS is a library for building data applications in pure Javascript and HTML.

It has 3 parts ...

It includes basic data object structure (Dataset, Record, Query), a set of
Backend connectors (Google Docs, CSV, ElasticSearch ...) and a suite of
standard integratable views - grid, graphs, maps - using best-of-breed existing
components.

Models           Backends                Views and Widgets



## Models

Models help you structure your work with data by providing some standard objects. The key ones are Dataset and Record -- a Dataset being a collection of Records. Additionally, there is a a Field object for describing the columns of a Dataset, a Query object for describing queries.

## Backends

Data needs to come from (and be stored) somewhere. In ReclineJS this functionality is provided by Backends which connect Dataset and Records to data from a specific 'Backend' data source -- for example Google Docs spreadsheets, local CSV files, the DataHub, ElasticSearch etc. They provide methods for loading and saving Datasets and individuals Records as well as for bulk loading via a query API and doing bulk transforms on the backend.

## Views and Widgets

Views are user interface component -- for example a map, a graph a data grid or a query editor. Views are crudely divided into two types:

* Dataset Views: a View intended for displaying a recline.Model.Dataset in some
  fashion. Examples are the Grid, Graph and Map views.
* Widget Views: a widget used for displaying some specific (and smaller) aspect
  of a dataset or the application. Examples are QueryEditor and FilterEditor
  which both provide a way for editing (a part of) a `recline.Model.Query`
  associated to a Dataset.

<section>
	<div class="container">
    <div class="row">
      <div class="span4">
        <h3>Models</h3>
        <p>Models help you structure your work with data by providing some standard objects. The key ones are Dataset and Record &ndash; a Dataset being a collection of Records. Additionally, there is a a Field object for describing the columns of a Dataset, a Query object for describing queries.</p>
			</div>
      <div class="span4">
        <h3>Backends</h3>
        <p>Backends connect your Models to data sources (and stores) &ndash; for example Google Docs spreadsheets, local CSV files, the DataHub, ElasticSearch etc. They provide methods for loading and saving Datasets and individuals Records as well as for bulk loading via a query API and doing bulk transforms on the backend.</p>
      </div>
      <div class="span4">
        <h3>Views</h3>
        <p>Views are user interface components for displaying, editing or otherwise interacting with the data, examples provided by Recline include a map, an interactive grapher, a data grid and a query editor.</p>
      </div>
    </div>
  </div>
</section>




<h3>Models</h3>
<div>
  <p>Models help you structure your work with data by providing standard objects. The key ones are:</p>
  <ul>
    <li><a href="docs/model.html#dataset">Dataset</a>: represents the dataset.
    Holds dataset info and a pointer to list of data items (Records in our
    terminology) which it can load from the relevant Backend.</li>
    <li><a href="docs/model.html#record">Record</a>: an individual data item
    (e.g. a row from a relational database or a spreadsheet, a record from from
    a document DB like CouchDB or MongoDB).</li>
  </ul>
  
  <p>Additionally, there are:</p>
  <ul>
    <li><a href="docs/model.html#field">Field</a>: a field/column on a
    dataset.</li>
    <li><a href="docs/model.html#query">Query</a>: an object to encapsulate a
    query to the backend (useful both for creating queries and for storing and
    manipulating query state - e.g. from a query editor).</li>
    <li><a href="docs/model.html#facet">Facet</a>: Object to store Facet
    information, that is summary information (e.g. values and counts) about a
    field obtained by some faceting method on the backend.</li>
  </ul>
</div>

  <div class="span4">
    <div class="well">
      <h3>Backends</h3>
      <p>Backends connect your Models to data sources (and stores) &ndash; for example Google Docs spreadsheets, local CSV files, the DataHub, ElasticSearch etc.</p>
      <p>They provide methods for loading and saving Datasets and individuals Records as well as for bulk loading via a query API and doing bulk transforms of the data.</p>
      <p>Backends shipped with Recline include the following (and it's easy to write your own):</p>
      <ul>
        <li><a href="docs/backend/memory.html">Memory Backend (local data)</a></li>
        <li><a href="docs/backend/elasticsearch.html">ElasticSearch Backend</a></li>
        <li><a href="docs/backend/dataproxy.html">DataProxy Backend (CSV and XLS on the Web)</a></li>
        <li><a href="docs/backend/gdocs.html">Google Docs (Spreadsheet) Backend</a></li>
        <li><a href="docs/backend/csv.html">Local CSV file backend</a></li>
      </ul>
    </div>
  </div>

  <div class="span4">
    <h3>Views</h3>
    <p>Complementing the model are various Views (you can
    also easily write your own). Each view holds a pointer to a Dataset:</p>
    <ul>
      <li>MultiView: the parent view which manages the overall app and sets up
      sub views.</li>
      <li>Grid: the data grid view.</li>
      <li>Graph: a simple graphing view using <a
        href="http://code.google.com/p/flot/">Flot</a>.</li>
      <li>Map: a map view using <a href="http://leaflet.cloudmade.com/">Leaflet</a>.</li>
    </ul>
    
    <p>There are additional views which do not display a whole dataset but which
    are useful:</p>
    <ul>
      <li>QueryEditor: a query editor view</li>
      <li>FacetViewer: display facets</li>
    </ul>
  </div>
</div>
