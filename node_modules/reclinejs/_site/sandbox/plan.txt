d = new Dataset({
  url: 'http://www.reclinejs.com/mycsv.csv'
});
d.fetch().then(function() {
});

d.query
d.filter ...

// much later ...
d.save() ...


var recline.Backend.DataProxy.load().then(
  var dataset ...



Challenge:

Special case: memory - always use memoryStore or always use it if it is there (it's not a normal ...)

  + more natural - memoryStore is not a real backend ...
  + built in - can do special casing ...
  - what is a backend then ...

Don't special case but delegate to Memory for all backends that operate that way (gdocs, dataproxy etc)

  + Clear what is happening
  - Somewhat hacky
  - Repeat a bunch of code
  - How does save work (does it just save to memory or to backend proper)

Don't have gdocs, dataproxy as backends just helpers / loaders - users must load data themselves ...

  + very explicit
  + long-winded and painful for obvious tasks

  * Alternatively: put more logic in Dataset to handle off to load from relevant backend if present ...

  + simpler
  - behaviour can be quite complex

Each backend implements the following functions:

fetch(dataset)
  -> Initial load of dataset

query(dataset, queryObj)
  -> Returns QueryResult

save(dataset, {
  updates: ...
  deletes: ...
  creates: ...
})

upsert

delete

// =====================

fetch: {
  // returns deferred
  return backend.fetch(dataset);
}

query: {
  if (this.memoryStore) {
    return this.memoryStore.query(queryObj)
  } else {
    return backend.query(queryObj);
  }
}

save: {
  backend.save(...)
}


loaders, savers

backend.load(...)
backend.query(...)
backend.save(rows)


if (d.memoryStore) {
  d.
}

document



var d = new Dataset({
  backend: ...
});

d.fetch();

d.query();

// if have memory store then use it ... (why duplicate onto currentRecords - answer restricted views for other objects)
// Qu: perhaps that should be bespoke in each case ... ??

// ....

d.filter()
d.groupby() aka d.facet();

...


# Library

## Concepts

## Overview

## Examples

* Create a new view
* Simple MultiView with local data
* Get data from Google Docs
* Get data from ElasticSearch
* Save data to ElasticSearch (no Backbone ...?)

* Custom fields - get some data from twitter and display

## OLD ...

Just a simple grid -- with local or remote data.

Getting data from google docs (you don't need any views!) in a decent form.

Piping data from one source to another.

Document model (should we move most of the documentation out of the page)

Using explorer or view state ...

## Example: how to write a dataset view (a simple view to display documents in a list)

Like normal backbone views.

recline-read-only
state

model: should always be a dataset

